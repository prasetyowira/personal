---
import Layout from '@layouts/Layout.astro';
import { useTranslations, getExperienceYearsString } from '@utils/i18n';

const locale = 'en';
const t = useTranslations(locale);
const yearsExp = getExperienceYearsString();

// Get Cloudflare Turnstile site key from environment variable
const turnstileSiteKey = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY || '';
console.log('turnstileSiteKey', turnstileSiteKey);
---

<Layout 
  title="Contact | Wira - Backend Engineer & Software Architect"
  description={`Get in touch with Wira, a senior backend engineer with ${yearsExp} years of experience in Golang, Python, and distributed systems.`}
  locale={locale}
>
  <!-- Cloudflare Turnstile Script -->
  <script is:inline src="https://challenges.cloudflare.com/turnstile/v0/api.js?render=explicit" async defer></script>
  
  <!-- Pass the site key as a data attribute to avoid object conversion issues -->
  <div id="turnstileData" data-sitekey={turnstileSiteKey} class="hidden"></div>
  
  <div class="terminal-contact">
    <div class="terminal-header mb-8">
      <h1 class="text-3xl md:text-4xl mb-4">$ Contact Me</h1>
      <p class="text-[--text-secondary] mb-6">Feel free to reach out for job opportunities, collaborations, or just a friendly chat about tech.</p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
      <!-- Contact Form -->
      <div class="contact-form-container">
        <div class="terminal-line mb-4">
          <span class="text-[--accent-green]">wira@portfolio</span><span class="text-[--text-secondary]">:</span><span class="text-[--accent-blue]">~/contact</span><span class="text-[--text-secondary]">$</span>
          <span class="text-[--text-primary] ml-2">touch message.txt && nano message.txt</span>
        </div>
        
        <form id="contact-form" class="p-4 border rounded bg-black/20" style="border-color: var(--border-color);" action="https://formspree.io/f/xrbpayzn" method="POST">
          <div class="mb-4">
            <label for="name" class="block text-[--text-secondary] mb-2">name:</label>
            <input 
              type="text" 
              id="name" 
              name="name" 
              required
              class="w-full bg-black/30 border border-[--border-color] text-[--text-primary] p-2 rounded focus:border-[--accent-green] focus:outline-none"
            />
          </div>
          
          <div class="mb-4">
            <label for="email" class="block text-[--text-secondary] mb-2">email:</label>
            <input 
              type="email" 
              id="email" 
              name="email" 
              required
              class="w-full bg-black/30 border border-[--border-color] text-[--text-primary] p-2 rounded focus:border-[--accent-green] focus:outline-none"
            />
          </div>
          
          <div class="mb-4">
            <label for="subject" class="block text-[--text-secondary] mb-2">subject:</label>
            <input 
              type="text" 
              id="subject" 
              name="subject" 
              required
              class="w-full bg-black/30 border border-[--border-color] text-[--text-primary] p-2 rounded focus:border-[--accent-green] focus:outline-none"
            />
          </div>
          
          <div class="mb-6">
            <label for="message" class="block text-[--text-secondary] mb-2">message:</label>
            <textarea 
              id="message" 
              name="message" 
              rows="6" 
              required
              class="w-full bg-black/30 border border-[--border-color] text-[--text-primary] p-2 rounded focus:border-[--accent-green] focus:outline-none resize-none"
            ></textarea>
          </div>
          
          <!-- Cloudflare Turnstile Widget -->
          <div class="mb-4 cf-turnstile-container">
            <div class="cf-turnstile"></div>
          </div>
          
          <!-- Hidden form fields -->
          <input type="hidden" name="locale" value="en">
          
          <div class="flex items-center">
            <button 
              type="submit"
              disabled
              class="inline-flex items-center justify-center px-4 py-2 bg-[#00FF85] text-black border border-[#00FF85] font-mono text-sm rounded transition-all duration-200 hover:bg-opacity-80 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span id="submit-text">Submit</span>
              <span id="loading-spinner" class="hidden ml-2">
                <svg class="animate-spin h-4 w-4 text-black" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </span>
            </button>
            <div id="form-status" class="ml-4 hidden">
              <span id="success-message" class="text-[--accent-green] hidden">Message sent successfully!</span>
              <span id="error-message" class="text-red-500 hidden">Error sending message. Please try again.</span>
            </div>
          </div>
        </form>
      </div>
      
      <!-- Contact Info -->
      <div class="contact-info-container">
        <div class="terminal-line mb-4">
          <span class="text-[--accent-green]">wira@portfolio</span><span class="text-[--text-secondary]">:</span><span class="text-[--accent-blue]">~/contact</span><span class="text-[--text-secondary]">$</span>
          <span class="text-[--text-primary] ml-2">cat contact_info.md</span>
        </div>
        
        <div class="p-4 border rounded bg-black/20" style="border-color: var(--border-color);">
          <div class="mb-6">
            <h2 class="text-2xl text-[--accent-green] mb-4">{t('contact.title')}</h2>
            <p class="mb-2 flex items-center">
              <span class="inline-block w-6">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-[--accent-blue]">
                  <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
                  <polyline points="22,6 12,13 2,6"></polyline>
                </svg>
              </span>
              <span class="ml-2">{t('contact.email')} <a href="mailto:hello@ariwira.me" class="text-[--accent-blue] hover:underline">hello@ariwira.me</a></span>
            </p>
            <p class="mb-2 flex items-center">
              <span class="inline-block w-6">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-[--accent-blue]">
                  <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path>
                </svg>
              </span>
              <span class="ml-2">{t('contact.github')} <a href="https://github.com/prasetyowira" class="text-[--accent-blue] hover:underline">github.com/prasetyowira</a></span>
            </p>
            <p class="flex items-center">
              <span class="inline-block w-6">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-[--accent-blue]">
                  <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path>
                  <rect x="2" y="9" width="4" height="12"></rect>
                  <circle cx="4" cy="4" r="2"></circle>
                </svg>
              </span>
              <span class="ml-2">{t('contact.linkedin')} <a href="https://linkedin.com/in/ariwira" class="text-[--accent-blue] hover:underline">linkedin.com/in/ariwira</a></span>
            </p>
          </div>
          
          <div class="response-time mt-8 p-4 border border-dashed rounded" style="border-color: var(--border-color);">
            <h3 class="text-xl text-[--accent-green] mb-2">Response Time</h3>
            <p class="text-[--text-primary] mb-2">I typically respond within 24-48 hours during weekdays.</p>
            <div class="flex items-center mt-4">
              <div class="w-2 h-2 rounded-full bg-[--accent-green] mr-2"></div>
              <span class="text-[--text-secondary] text-sm">Online during GMT+7 working hours</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  console.log('Contact form script block started.'); // Debug log: Script start

  // --- Global Variables ---
  let turnstileInitialized = false;
  let turnstileWidgetId: string | null = null; // Store the widget ID

  // Add type declaration for the global callback
  declare global {
    interface Window {
      onloadTurnstileCallback: () => void;
    }
  }

  // --- Turnstile Initialization Function ---
  function initializeTurnstile() {
    console.log('Attempting to initialize Turnstile (called by onloadTurnstileCallback or manual trigger)...'); // Debug log
    if (turnstileInitialized) {
      console.log('Turnstile already initialized.'); // Debug log
      return; // Don't initialize twice
    }

    const turnstileContainer = document.querySelector('.cf-turnstile');
    const turnstileDataElement = document.getElementById('turnstileData');
    const turnstileSiteKey = turnstileDataElement?.getAttribute('data-sitekey') || '';
    const submitButton = document.querySelector('button[type="submit"]') as HTMLButtonElement | null;

    if (!turnstileContainer) {
      console.error('Turnstile container (.cf-turnstile) not found.');
      return;
    }
    if (!turnstileDataElement) {
      console.error('Turnstile data element (#turnstileData) not found.');
      return;
    }
    if (!turnstileSiteKey) {
      console.error('Turnstile site key not found in data attribute.');
      return;
    }

    // Check if the Turnstile API is available (should be if called by onloadTurnstileCallback)
    if (window.turnstile) {
      console.log('window.turnstile found. Rendering widget.'); // Debug log
      try {
        turnstileWidgetId = window.turnstile.render('.cf-turnstile', {
          sitekey: turnstileSiteKey,
          theme: 'dark',
          callback: function(token: string) {
            console.log('Turnstile callback executed. Token received.'); // Debug log
            if (submitButton) {
              console.log('Enabling submit button via Turnstile callback.'); // Debug log
              submitButton.disabled = false;
            } else {
              console.error('Turnstile callback: Submit button not found!');
            }
          },
          'error-callback': function() {
            console.error('Turnstile error callback executed.');
            if (submitButton) submitButton.disabled = true; // Keep disabled on error
          },
          'expired-callback': function() {
            console.warn('Turnstile expired callback executed.');
            if (submitButton) submitButton.disabled = true; // Disable again if expired
            window.turnstile?.reset(turnstileWidgetId ?? undefined);
          },
          'timeout-callback': function() {
            console.error('Turnstile timeout callback executed.');
             if (submitButton) submitButton.disabled = true; // Keep disabled on timeout
          }
        });
        turnstileInitialized = true;
        console.log('Turnstile render called successfully. Widget ID:', turnstileWidgetId); // Debug log
      } catch (error) {
        console.error('Error calling window.turnstile.render:', error);
      }
    } else {
      // This case should ideally not happen if called via onloadTurnstileCallback
      console.error('window.turnstile not found during initialization attempt!'); // Changed to error
    }
  }

  // --- Make initializeTurnstile globally accessible for Turnstile API ---
  window.onloadTurnstileCallback = initializeTurnstile;
  console.log('window.onloadTurnstileCallback assigned.'); // Debug log

  // --- Form Handling Setup ---
  function setupFormListener() {
    console.log('Setting up form submit listener...'); // Debug log
    const form = document.getElementById('contact-form') as HTMLFormElement;
    const formStatus = document.getElementById('form-status');
    const successMessage = document.getElementById('success-message');
    const errorMessage = document.getElementById('error-message');
    const submitText = document.getElementById('submit-text');
    const loadingSpinner = document.getElementById('loading-spinner');
    const submitButton = form?.querySelector('button[type="submit"]') as HTMLButtonElement | null;

    if (!form) {
      console.error('Contact form not found in setupFormListener.');
      return;
    }
    if (!submitButton) {
       console.error('Submit button not found in setupFormListener.');
       return;
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      console.log('Form submission started.'); // Debug log

      submitButton.disabled = true;
      if (submitText) submitText.textContent = 'Sending';
      if (loadingSpinner) loadingSpinner.classList.remove('hidden');

      try {
        const formData = new FormData(form);
        const token = window.turnstile?.getResponse(turnstileWidgetId ?? undefined);
        console.log('Turnstile token retrieved:', token ? 'Exists' : 'Missing'); // Debug log

        if (!token) {
          throw new Error('Please complete the Turnstile challenge');
        }

        formData.append('cf-turnstile-response', token);

        // Try server-side verification first
        try {
          const verifyUrl = window.location.origin + '/api/verify';
          console.log('Attempting server-side verification...'); // Debug log
          const verifyResponse = await fetch(verifyUrl, {
            method: 'POST',
            body: formData
          });
          const contentType = verifyResponse.headers.get('content-type');
          if (verifyResponse.ok && contentType?.includes('application/json')) {
             const result = await verifyResponse.json();
             console.log('Server-side verification result:', result);
          } else {
            console.warn(`Server-side verification response not OK or not JSON. Status: ${verifyResponse.status}`);
          }
        } catch (verifyError) {
          console.warn('Server-side verification fetch failed, proceeding with Formspree:', verifyError);
        }

        // Submit to Formspree
        console.log('Submitting to Formspree...'); // Debug log
        const response = await fetch(form.action, {
          method: 'POST',
          body: formData,
          headers: { 'Accept': 'application/json' }
        });

        if (response.ok) {
          console.log('Formspree submission successful.'); // Debug log
          if (formStatus) formStatus.classList.remove('hidden');
          if (successMessage) successMessage.classList.remove('hidden');
          if (errorMessage) errorMessage.classList.add('hidden');
          form.reset();
          window.turnstile?.reset(turnstileWidgetId ?? undefined);
          console.log('Form reset and Turnstile reset called.'); // Debug log
          submitButton.disabled = true; // Keep disabled after success until Turnstile resets/re-verifies

          setTimeout(() => {
            if (formStatus) formStatus.classList.add('hidden');
            if (successMessage) successMessage.classList.add('hidden');
          }, 5000);
        } else {
           console.error(`Formspree submission failed. Status: ${response.status}`); // Debug log
          throw new Error('Form submission failed');
        }
      } catch (err) {
        console.error('Error during form submission process:', err);
        if (formStatus) formStatus.classList.remove('hidden');
        if (errorMessage) {
          errorMessage.classList.remove('hidden');
          errorMessage.textContent = err instanceof Error ? err.message : 'Error sending message. Please try again.';
        }
        if (successMessage) successMessage.classList.add('hidden');

        window.turnstile?.reset(turnstileWidgetId ?? undefined);
        submitButton.disabled = true; // Keep disabled on error until reset/re-verify

        setTimeout(() => {
          if (formStatus) formStatus.classList.add('hidden');
          if (errorMessage) {
            errorMessage.classList.add('hidden');
            errorMessage.textContent = 'Error sending message. Please try again.';
          }
        }, 5000);

      } finally {
        console.log('Form submission finally block.'); // Debug log
        // Note: Button is intentionally kept disabled here after submit.
        // It gets re-enabled by the Turnstile 'callback' upon successful re-verification.
        if (submitText) submitText.textContent = 'Submit';
        if (loadingSpinner) loadingSpinner.classList.add('hidden');
      }
    });
     console.log('Form submit listener attached.'); // Debug log
  }

  // --- Main Execution Logic: Setup form listener when DOM is ready ---
  console.log('Setting up main execution logic...'); // Debug log

  function runSetup() {
    console.log('runSetup called.'); // Debug log
    setupFormListener();

    // Safeguard: If Turnstile loaded *before* this script ran DOM ready logic,
    // the onloadTurnstileCallback might have been missed. Initialize manually.
    if (window.turnstile && !turnstileInitialized) {
        console.log('Turnstile API found during runSetup, manually initializing...'); // Debug log
        initializeTurnstile();
    }
  }

  // Attach form listener setup to DOMContentLoaded
  try {
    console.log('Attempting to add DOMContentLoaded listener for setupFormListener...'); // Debug log
    document.addEventListener('DOMContentLoaded', runSetup);
    console.log('DOMContentLoaded listener for setupFormListener added successfully.'); // Debug log
  } catch (e) {
    console.error('Error adding DOMContentLoaded listener for setupFormListener:', e);
  }

  // If DOM is already ready (e.g., script loaded late), run setup now
  if (document.readyState === 'interactive' || document.readyState === 'complete') {
    console.log('DOM already interactive or complete, running setupFormListener now.'); // Debug log
    runSetup();
  }

  // Turnstile initialization is now handled by window.onloadTurnstileCallback

  console.log('Contact form script block finished setup.'); // Debug log: Script end
</script>

<style>
  .terminal-contact {
    font-family: 'JetBrains Mono', monospace;
  }
  
  input, textarea {
    font-family: 'JetBrains Mono', monospace;
  }

  #submit-text {
    font-family: 'JetBrains Mono', monospace;
    color: var(--bg-terminal);
  }
  
  .terminal-line {
    white-space: nowrap;
    overflow: hidden;
  }
  
  @keyframes typingCursor {
    0% { border-color: var(--accent-green); }
    50% { border-color: transparent; }
    100% { border-color: var(--accent-green); }
  }
  
  input:focus, textarea:focus {
    border-right: 2px solid var(--accent-green);
    animation: typingCursor 1s step-end infinite;
  }
  
  .cf-turnstile-container {
    display: flex;
    justify-content: center;
  }
</style> 