---
import Layout from '@layouts/Layout.astro';
import { useTranslations, getExperienceYearsString } from '@utils/i18n';

const locale = 'en';
const t = useTranslations(locale);
const yearsExp = getExperienceYearsString();

// Get Cloudflare Turnstile site key from environment variable
const turnstileSiteKey = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY || '';
---

<Layout 
  title="Contact | Wira - Backend Engineer & Software Architect"
  description={`Get in touch with Wira, a senior backend engineer with ${yearsExp} years of experience in Golang, Python, and distributed systems.`}
  locale={locale}
>
  <!-- Cloudflare Turnstile Script -->
  <script is:inline src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>
  
  <div class="terminal-contact">
    <div class="terminal-header mb-8">
      <h1 class="text-3xl md:text-4xl mb-4">$ Contact Me</h1>
      <p class="text-[--text-secondary] mb-6">Feel free to reach out for job opportunities, collaborations, or just a friendly chat about tech.</p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
      <!-- Contact Form -->
      <div class="contact-form-container">
        <div class="terminal-line mb-4">
          <span class="text-[--accent-green]">wira@portfolio</span><span class="text-[--text-secondary]">:</span><span class="text-[--accent-blue]">~/contact</span><span class="text-[--text-secondary]">$</span>
          <span class="text-[--text-primary] ml-2">touch message.txt && nano message.txt</span>
        </div>
        
        <form id="contact-form" class="p-4 border rounded bg-black/20" style="border-color: var(--border-color);" action="https://formspree.io/f/xrbpayzn" method="POST">
          <div class="mb-4">
            <label for="name" class="block text-[--text-secondary] mb-2">name:</label>
            <input 
              type="text" 
              id="name" 
              name="name" 
              required
              class="w-full bg-black/30 border border-[--border-color] text-[--text-primary] p-2 rounded focus:border-[--accent-green] focus:outline-none"
            />
          </div>
          
          <div class="mb-4">
            <label for="email" class="block text-[--text-secondary] mb-2">email:</label>
            <input 
              type="email" 
              id="email" 
              name="email" 
              required
              class="w-full bg-black/30 border border-[--border-color] text-[--text-primary] p-2 rounded focus:border-[--accent-green] focus:outline-none"
            />
          </div>
          
          <div class="mb-4">
            <label for="subject" class="block text-[--text-secondary] mb-2">subject:</label>
            <input 
              type="text" 
              id="subject" 
              name="subject" 
              required
              class="w-full bg-black/30 border border-[--border-color] text-[--text-primary] p-2 rounded focus:border-[--accent-green] focus:outline-none"
            />
          </div>
          
          <div class="mb-6">
            <label for="message" class="block text-[--text-secondary] mb-2">message:</label>
            <textarea 
              id="message" 
              name="message" 
              rows="6" 
              required
              class="w-full bg-black/30 border border-[--border-color] text-[--text-primary] p-2 rounded focus:border-[--accent-green] focus:outline-none resize-none"
            ></textarea>
          </div>
          
          <!-- Cloudflare Turnstile Widget -->
          <div class="mb-4 cf-turnstile-container">
            <div class="cf-turnstile"></div>
          </div>
          
          <!-- Hidden form fields -->
          <input type="hidden" name="locale" value="en">
          
          <div class="flex items-center">
            <button 
              type="submit"
              class="inline-flex items-center justify-center px-4 py-2 bg-[#00FF85] text-black border border-[#00FF85] font-mono text-sm rounded transition-all duration-200 hover:bg-opacity-80"
            >
              <span id="submit-text">Submit</span>
              <span id="loading-spinner" class="hidden ml-2">
                <svg class="animate-spin h-4 w-4 text-black" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </span>
            </button>
            <div id="form-status" class="ml-4 hidden">
              <span id="success-message" class="text-[--accent-green] hidden">Message sent successfully!</span>
              <span id="error-message" class="text-red-500 hidden">Error sending message. Please try again.</span>
            </div>
          </div>
        </form>
      </div>
      
      <!-- Contact Info -->
      <div class="contact-info-container">
        <div class="terminal-line mb-4">
          <span class="text-[--accent-green]">wira@portfolio</span><span class="text-[--text-secondary]">:</span><span class="text-[--accent-blue]">~/contact</span><span class="text-[--text-secondary]">$</span>
          <span class="text-[--text-primary] ml-2">cat contact_info.md</span>
        </div>
        
        <div class="p-4 border rounded bg-black/20" style="border-color: var(--border-color);">
          <div class="mb-6">
            <h2 class="text-2xl text-[--accent-green] mb-4">{t('contact.title')}</h2>
            <p class="mb-2 flex items-center">
              <span class="inline-block w-6">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-[--accent-blue]">
                  <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
                  <polyline points="22,6 12,13 2,6"></polyline>
                </svg>
              </span>
              <span class="ml-2">{t('contact.email')} <a href="mailto:hello@ariwira.me" class="text-[--accent-blue] hover:underline">hello@ariwira.me</a></span>
            </p>
            <p class="mb-2 flex items-center">
              <span class="inline-block w-6">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-[--accent-blue]">
                  <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path>
                </svg>
              </span>
              <span class="ml-2">{t('contact.github')} <a href="https://github.com/prasetyowira" class="text-[--accent-blue] hover:underline">github.com/prasetyowira</a></span>
            </p>
            <p class="flex items-center">
              <span class="inline-block w-6">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-[--accent-blue]">
                  <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path>
                  <rect x="2" y="9" width="4" height="12"></rect>
                  <circle cx="4" cy="4" r="2"></circle>
                </svg>
              </span>
              <span class="ml-2">{t('contact.linkedin')} <a href="https://linkedin.com/in/ariwira" class="text-[--accent-blue] hover:underline">linkedin.com/in/ariwira</a></span>
            </p>
          </div>
          
          <div class="response-time mt-8 p-4 border border-dashed rounded" style="border-color: var(--border-color);">
            <h3 class="text-xl text-[--accent-green] mb-2">Response Time</h3>
            <p class="text-[--text-primary] mb-2">I typically respond within 24-48 hours during weekdays.</p>
            <div class="flex items-center mt-4">
              <div class="w-2 h-2 rounded-full bg-[--accent-green] mr-2"></div>
              <span class="text-[--text-secondary] text-sm">Online during GMT+7 working hours</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ turnstileSiteKey: String(turnstileSiteKey) }}>
  // Form submission handling with Formspree and Turnstile
  const form = document.getElementById('contact-form');
  const formStatus = document.getElementById('form-status');
  const successMessage = document.getElementById('success-message');
  const errorMessage = document.getElementById('error-message');
  const submitText = document.getElementById('submit-text');
  const loadingSpinner = document.getElementById('loading-spinner');
  let turnstileWidgetId = null;
  
  // Initialize Turnstile with callback to store widget ID
  window.onload = function() {
    if (window.turnstile) {
      // Wait for Turnstile to be fully loaded
      setTimeout(() => {
        // Check if we have a valid site key as a string
        if (typeof turnstileSiteKey === 'string' && turnstileSiteKey.length > 0) {
          console.log('Initializing Turnstile with site key');
          turnstileWidgetId = window.turnstile.render('.cf-turnstile', {
            sitekey: turnstileSiteKey,
            theme: 'dark',
            callback: function(token) {
              // Optional: enable submit button when challenge is completed
              const submitButton = form?.querySelector('button[type="submit"]');
              if (submitButton) submitButton.disabled = false;
            }
          });
        } else {
          console.error('Invalid Turnstile site key:', turnstileSiteKey);
        }
      }, 500);
    } else {
      console.warn('Turnstile not loaded');
    }
  };
  
  // Safe function to reset Turnstile
  function safeResetTurnstile() {
    try {
      if (window.turnstile && turnstileWidgetId) {
        window.turnstile.reset(turnstileWidgetId);
      }
    } catch (e) {
      console.warn('Failed to reset Turnstile:', e);
    }
  }
  
  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Show loading state
      const submitButton = form.querySelector('button[type="submit"]');
      submitButton.disabled = true;
      submitText.textContent = 'Sending';
      loadingSpinner.classList.remove('hidden');
      
      try {
        // Get form data
        const formData = new FormData(form);
        
        // Get the Turnstile token
        const token = window.turnstile?.getResponse(turnstileWidgetId);
        
        if (!token) {
          throw new Error('Please complete the Turnstile challenge');
        }
        
        // Add the token to the form data
        formData.append('cf-turnstile-response', token);

        console.log('turnstile check');
        
        // Prepare verification with Formspree and include Turnstile token
        // Adding a client-side verification fallback since the API route may not work on Vercel
        try {
          // Try our API first but with error handling
          let verificationSuccessful = false;
          try {
            const verifyUrl = window.location.origin + '/api/verify-turnstile';
            console.log('Verifying Turnstile token at:', verifyUrl);
            
            const verifyResponse = await fetch(verifyUrl, {
              method: 'POST',
              body: formData
            });
            
            // Check if the response is JSON
            const contentType = verifyResponse.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
              const verifyResult = await verifyResponse.json();
              verificationSuccessful = verifyResult.success;
              
              if (!verificationSuccessful) {
                console.warn('API verification failed:', verifyResult.error || 'Unknown error');
              }
            } else {
              console.warn('API endpoint returned non-JSON response');
            }
          } catch (verifyError) {
            console.warn('Error using API endpoint for verification, falling back to Formspree:', verifyError);
          }
          
          // If our API fails, proceed anyway and let Formspree handle the verification
          if (!verificationSuccessful) {
            console.log('Proceeding with Formspree submission (they also verify Turnstile tokens)');
          }
          
          // Submit to Formspree (which also validates Turnstile tokens)
          const response = await fetch(form.action, {
            method: 'POST',
            body: formData,
            headers: {
              'Accept': 'application/json'
            }
          });
          
          if (response.ok) {
            // Show success message
            formStatus.classList.remove('hidden');
            successMessage.classList.remove('hidden');
            errorMessage.classList.add('hidden');
            
            // Reset form
            form.reset();
            
            // Reset Turnstile
            safeResetTurnstile();
            
            // Hide success message after 5 seconds
            setTimeout(() => {
              formStatus.classList.add('hidden');
              successMessage.classList.add('hidden');
            }, 5000);
          } else {
            // Response not OK, show error
            throw new Error('Form submission failed');
          }
        } catch (err) {
          // Show error message
          formStatus.classList.remove('hidden');
          errorMessage.classList.remove('hidden');
          successMessage.classList.add('hidden');
          
          // Set error message text if available
          if (err instanceof Error && err.message) {
            errorMessage.textContent = err.message;
          } else {
            errorMessage.textContent = 'Error sending message. Please try again.';
          }
          
          // Reset Turnstile
          safeResetTurnstile();
          
          // Hide error message after 5 seconds
          setTimeout(() => {
            formStatus.classList.add('hidden');
            errorMessage.classList.add('hidden');
            // Reset error message to default
            errorMessage.textContent = 'Error sending message. Please try again.';
          }, 5000);
          
          console.error('Error sending form:', err);
        } finally {
          // Restore button state
          submitButton.disabled = false;
          submitText.textContent = 'Submit';
          loadingSpinner.classList.add('hidden');
        }
      } catch (err) {
        // Show error message
        formStatus.classList.remove('hidden');
        errorMessage.classList.remove('hidden');
        successMessage.classList.add('hidden');
        
        // Set error message text if available
        if (err instanceof Error && err.message) {
          errorMessage.textContent = err.message;
        } else {
          errorMessage.textContent = 'Error sending message. Please try again.';
        }
        
        // Reset Turnstile
        safeResetTurnstile();
        
        // Hide error message after 5 seconds
        setTimeout(() => {
          formStatus.classList.add('hidden');
          errorMessage.classList.add('hidden');
          // Reset error message to default
          errorMessage.textContent = 'Error sending message. Please try again.';
        }, 5000);
        
        console.error('Error sending form:', err);
      }
    });
  }
</script>

<style>
  .terminal-contact {
    font-family: 'JetBrains Mono', monospace;
  }
  
  input, textarea {
    font-family: 'JetBrains Mono', monospace;
  }

  #submit-text {
    font-family: 'JetBrains Mono', monospace;
    color: var(--bg-terminal);
  }
  
  .terminal-line {
    white-space: nowrap;
    overflow: hidden;
  }
  
  @keyframes typingCursor {
    0% { border-color: var(--accent-green); }
    50% { border-color: transparent; }
    100% { border-color: var(--accent-green); }
  }
  
  input:focus, textarea:focus {
    border-right: 2px solid var(--accent-green);
    animation: typingCursor 1s step-end infinite;
  }
  
  .cf-turnstile-container {
    display: flex;
    justify-content: center;
  }
</style> 