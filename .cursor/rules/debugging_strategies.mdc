---
description: How to approach debugging something
globs: 
---
# Debugging Strategies

## Core Principle

When facing complex issues, especially in CI/CD or multi-service environments, simplify the problem space before attempting to debug. This approach helps isolate the root cause and prevents confusion from interconnected issues.

## Strategy

1. **Strip Non-Essential Services**
   - Identify the core service/functionality that's failing
   - Remove or comment out dependencies that aren't critical for reproduction
   - Example: When debugging NestJS connectivity, remove Angular and Playwright steps

2. **Remove CI/CD Complexity**
   - Comment out or remove non-essential CI steps
   - Remove artifact handling, git operations, etc.
   - Focus on the minimal pipeline needed to reproduce the issue

3. **Establish Clear Test Points**
   ```yaml
   # Example: Testing service connectivity
   - name: Test NestJS Connectivity
     run: |
       error=0
       echo "Testing localhost:3000..."
       curl -v http://localhost:3000/ || { echo "localhost failed"; error=1; }
       exit $error
   ```

4. **Add Explicit Verification**
   - Add logging at each critical step
   - Verify state before proceeding
   - Make failures obvious and meaningful
   ```yaml
   echo -e "\n=== Verifying Container Status ==="
   docker inspect --format '{{.State.Running}}' nestjs || { echo "Container not running"; exit 1; }
   ```

5. **Incremental Complexity**
   - Only add back complexity once the core functionality works
   - Add one component at a time
   - Verify at each step that everything still works

## When to Use This Strategy

- CI/CD pipeline failures
- Multi-service connectivity issues
- Integration test failures
- Any issue where the root cause is unclear

## Real World Example

In our NestJS/Angular/Playwright setup, we:
1. Removed Angular and Playwright steps
2. Focused on NestJS connectivity
3. Added explicit verification steps
4. Found and fixed the CORS configuration issue
5. Created a template for adding back complexity

## Warnings that you're going offcourse

Watch for these indicators that simplification might be needed:
- Multiple services failing in different ways
- Inconsistent failures
- Difficulty reproducing issues
- Unclear which component is the source of the problem

## Benefits

1. **Clarity**: Reduces noise and focuses on the core issue
2. **Speed**: Faster iteration on potential fixes
3. **Confidence**: Clear understanding of what works and what doesn't
4. **Documentation**: Process naturally documents the system's dependencies
